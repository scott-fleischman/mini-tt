

module Core.AbsCore where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype CaseTk = CaseTk ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype DataTk = DataTk ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
data Exp
    = ELam Patt Exp
    | ESet
    | EPi Patt Exp Exp
    | ESig Patt Exp Exp
    | EOne
    | Eunit
    | EPair Exp Exp
    | ECon Ident Exp
    | EData DataTk [Summand]
    | ECase CaseTk [Branch]
    | EFst Exp
    | ESnd Exp
    | EApp Exp Exp
    | EVar Ident
    | EVoid
    | EDec Decl Exp
    | EPN
  deriving (Eq, Ord, Show, Read)

data Decl = Def Patt Exp Exp | Drec Patt Exp Exp
  deriving (Eq, Ord, Show, Read)

data Patt = PPair Patt Patt | Punit | PVar Ident
  deriving (Eq, Ord, Show, Read)

data Summand = Summand Ident Exp
  deriving (Eq, Ord, Show, Read)

data Branch = Branch Ident Exp
  deriving (Eq, Ord, Show, Read)

