module Core.SkelCore where

-- Haskell module generated by the BNF converter

import Core.AbsCore
import Core.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transCaseTk :: CaseTk -> Result
transCaseTk x = case x of
  CaseTk string -> failure x
transDataTk :: DataTk -> Result
transDataTk x = case x of
  DataTk string -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ELam patt exp -> failure x
  ESet -> failure x
  EPi patt exp1 exp2 -> failure x
  ESig patt exp1 exp2 -> failure x
  EOne -> failure x
  Eunit -> failure x
  EPair exp1 exp2 -> failure x
  ECon ident exp -> failure x
  EData datatk summands -> failure x
  ECase casetk branchs -> failure x
  EFst exp -> failure x
  ESnd exp -> failure x
  EApp exp1 exp2 -> failure x
  EVar ident -> failure x
  EVoid -> failure x
  EDec decl exp -> failure x
  EPN -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Def patt exp1 exp2 -> failure x
  Drec patt exp1 exp2 -> failure x
transPatt :: Patt -> Result
transPatt x = case x of
  PPair patt1 patt2 -> failure x
  Punit -> failure x
  PVar ident -> failure x
transSummand :: Summand -> Result
transSummand x = case x of
  Summand ident exp -> failure x
transBranch :: Branch -> Result
transBranch x = case x of
  Branch ident exp -> failure x

